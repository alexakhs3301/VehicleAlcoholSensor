// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VehicleAlcoholSensor.EF;

#nullable disable

namespace VehicleAlcoholSensor.EF.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221215140157_migr_0000_2022")]
    partial class migr_0000_2022
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.Base.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VehicleDriverId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleDriverId");

                    b.ToTable("Metrics", "public");
                });

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.Base.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", "public");
                });

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.MultiDimension.VehicleDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleDrivers", "public");
                });

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.Base.Metric", b =>
                {
                    b.HasOne("VehicleAlcoholSensor.Domain.Entities.MultiDimension.VehicleDriver", "VechicleDriver")
                        .WithMany("Metrics")
                        .HasForeignKey("VehicleDriverId");

                    b.Navigation("VechicleDriver");
                });

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.MultiDimension.VehicleDriver", b =>
                {
                    b.HasOne("VehicleAlcoholSensor.Domain.Entities.Security.User", "Driver")
                        .WithMany("VehicleDrivers")
                        .HasForeignKey("DriverId");

                    b.HasOne("VehicleAlcoholSensor.Domain.Entities.Base.Vehicle", "Vehicle")
                        .WithMany("VehicleDrivers")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.Base.Vehicle", b =>
                {
                    b.Navigation("VehicleDrivers");
                });

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.MultiDimension.VehicleDriver", b =>
                {
                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("VehicleAlcoholSensor.Domain.Entities.Security.User", b =>
                {
                    b.Navigation("VehicleDrivers");
                });
#pragma warning restore 612, 618
        }
    }
}
